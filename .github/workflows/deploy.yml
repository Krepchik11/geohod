name: Build and Deploy

on:
  release:
    types:
      - published
  workflow_dispatch:
      
jobs:
  build-and-publish:
    name: Build and publish docker image
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build production app
        run: npm run build

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          tags: ${{ github.repository }}:${{ github.ref_name }}
          outputs: type=docker,dest=./image.tar

      - name: Transfer image to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: ./image.tar
          target: /tmp/geohod-frontend/
          overwrite: true
          rm: true

      - name: Cleanup local file
        if: always()
        run: rm ./image.tar
          
      - name: VPS launch
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker load < /tmp/geohod-frontend/image.tar
            docker stop geohod-frontend || true
            docker rm geohod-frontend || true
            
            ENV_ARGS=""
            for line in $(echo "${{ secrets.SECRETS_VARS }}" | tr '\n' ' '); do
              ENV_ARGS="$ENV_ARGS -e $line"
            done
            
            for line in $(echo "${{ vars.ENV_VARS }}" | tr '\n' ' '); do
              ENV_ARGS="$ENV_ARGS -e $line"
            done
            
            docker run -d --restart always \
              --network=geohod \
              --name geohod-frontend \
              -p 80:80 \
              -p 443:443 \
              -v /etc/letsencrypt:/etc/nginx/certs \
              $ENV_ARGS \
              ${{ github.repository }}:${{ github.ref_name }}